#!/usr/bin/env python3
# This file is placed in the Public Domain.


"objects"


import os
import shutil
import sys
import time


sys.path.insert(0, os.getcwd())


from objz.command import Commands, Config, Event, command, parse, scanner
from objz.methods import fmt, ident
from objz.objects import Object
from objz.persist import Workdir, find, fntime, getpath, read, skel, types, write
from objz.utility import elapsed, launch


Workdir.wdr = ".test"


events = []
examples = {
    "cmd": [""],
    "dne": ["", "test2"],
    "log": ["", "test"],
    "fnd": ["", "log", "todo"],
    "tdo": ["", "test2", "test3"]
}


class Event(Event):

    def dosay(self, txt):
        print(txt)


def payload():
        for cmd, example in examples.items():
            for ex in example:
                evt = Event()
                evt.txt = f"{cmd} {ex}"
                command(evt)
                events.append(evt)

def main():
    parse(Config, " ".join(sys.argv[1:]))
    nr = Config.index or 100
    if os.path.exists(Workdir.wdr):
        shutil.rmtree(Workdir.wdr)
    scanner("mods", "mods")
    starttime = time.time()
    thrs = []
    for _x in range(nr):
        thrs.append(launch(payload))
    for thr in thrs:
        thr.join()
    gotcha = []
    for evt in events:
        evt.wait()
        gotcha.append(evt)
    nrevents = len(events)
    for evt in gotcha:
        events.remove(evt)
    endtime = time.time()
    lap = elapsed(endtime-starttime)
    percall = (endtime-starttime)/nrevents
    if "v" in Config.opts:
        print(f"{len(events)} events left.")
        print(f"total: {lap} nrs: {nr} call: %.6fs" % percall)
    sys.exit()


if __name__ == "__main__":
    main()
    