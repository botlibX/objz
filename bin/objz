#!/usr/bin/env python3
# This file is placed in the Public Domain.
# ruff: noqa: E402


"main"


import logging
import os
import readline
import sys
import termios
import threading
import time
import _thread


sys.path.insert(0, os.getcwd())


from objz.command import Config, Mods, command, parse, scanner
from objz.persist import Workdir
from objz.utility import Event, forever, launch, level


Mods.dir("mods", "mods")
Workdir.wdr = os.path.expanduser(f"~/.{Config.name}")


class Console:

    def loop(self):
        while True:
            try:
                event = self.poll()
                if event.txt:
                    command(event)
            except (KeyboardInterrupt, EOFError):
                _thread.interrupt_main()

    def poll(self):
        event = Event()
        event.txt = input("> ")
        return event

    def start(self):
        launch(self.loop)


class Event(Event):

    def dosay(self, txt):
        print(txt)


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print("%s %s since %s (%s)" % (Config.name.upper(), Config.version, tme, Config.level.upper()))


def check(txt):
    args = sys.argv[1:]
    for arg in args:
        if not arg.startswith("-"):
            continue
        for char in txt:
            if char in arg:
                return True
    return False


def console():
    txt = " ".join(sys.argv[1:])
    parse(Config, txt)
    level(Config.level)
    if "v" in Config.opts:
        banner()
    scanner()
    csl = Console()
    csl.start()
    forever()


def control():
    txt = " ".join(sys.argv[1:])
    parse(Config, txt)
    scanner()
    evt = Event()
    evt.txt = txt
    command(evt)


def wrapped(func):
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")


def wrap(func):
    old = None
    try:
        old = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        wrapped(func)
    finally:
        if old:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)


def main():
    if check("c"):
        wrap(console)
    else:
        wrapped(control)


if __name__ == "__main__":
    main()
