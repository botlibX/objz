#!/usr/bin/env python3
# This file is placed in the Public Domain.


"main"


import os
import readline
import signal
import sys
import termios
import time
import _thread


signal.signal(signal.SIGINT, signal.SIG_DFL)


sys.path.insert(0, os.getcwd())


from objz.methods import fmt


from mods import Config, Mods, Workdir #noqa: E402
from mods import command, forever, launch, level, scanner # noqa: E402


Mods.dir("mods", "mods")
Workdir.wdr = os.path.expanduser(f"~/.{Config.name}")


class Console:

    def loop(self):
        while True:
            try:
                event = self.poll()
                if event.txt:
                    command(event)
            except (KeyboardInterrupt, EOFError):
                _thread.interrupt_main()

    def poll(self):
        event = Event()
        event.txt = input("> ")
        return event

    def start(self):
        launch(self.loop)
        forever()


class Event:

    def __init__(self):
        self.result = {}
        self.txt = ""

    def display(self):
        for tme in sorted(self.result):
            print(self.result[tme])

    def parse(self, txt):
        self.otxt = txt or self.txt
        self.cmd = self.otxt and self.otxt.split()[0]
        self.args = self.cmd and self.otxt.split()[1:]
        self.rest = self.args and  " ".join(self.args)
        self.txt = self.args and " ".join(self.args)

    def reply(self, txt):
        self.result[time.time()] = txt


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print("%s %s since %s (%s)" % (Config.name.upper(), Config.version, tme, Config.level.upper()))


def wrapped(func):
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")


def wrap(func):
    old = None
    try:
        old = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        wrapped(func)
    finally:
        if old:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)


def main():
    txt = " ".join(sys.argv[1:])
    if not txt:
        os._exit(0)
    scanner()
    if "-c" in sys.argv:
        banner()
        level(Config.level)
        csl = Console()
        csl.start()
    else:
        evt = Event()
        evt.txt = txt
        command(evt)


if __name__ == "__main__":
    wrap(main)
